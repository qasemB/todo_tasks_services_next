openapi: 3.0.0
info:
  title: Next.js API with Swagger
  version: 1.0.0
  description: API documentation for a Next.js project
servers:
  - url: "http://localhost:3000"
components:
  schemas:
    CreateUserDto:
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          type: string
          description: The phone number of the user.
          example: "+1234567890"
        password:
          type: string
          description: The password for the user account.
          example: "password123"
        email:
          type: string
          description: The email address of the user.
          example: "user@example.com"
        firstName:
          type: string
          description: The first name of the user.
          example: "John"
        lastName:
          type: string
          description: The last name of the user.
          example: "Doe"
        role:
          type: string
          description: The role assigned to the user.
          example: "user"
        gender:
          type: integer
          description: The gender of the user.
          example: 1
    UpdateUserDto:
      type: object
      properties:
        phone:
          type: string
          description: The phone number of the user.
          example: "+1234567890"
        password:
          type: string
          description: The password for the user account.
          example: "password123"
        email:
          type: string
          description: The email address of the user.
          example: "user@example.com"
        firstName:
          type: string
          description: The first name of the user.
          example: "John"
        lastName:
          type: string
          description: The last name of the user.
          example: "Doe"
        role:
          type: string
          description: The role assigned to the user.
          example: "user"
        gender:
          type: integer
          description: The gender of the user.
          example: 1
paths:
  /api/admin/users:
    get:
      security:
        - bearerAuth: []
      tags:
        - Admin/Users
      summary: Retrieve a list of users
      description: This endpoint retrieves a list of all users.
      responses:
        "200":
          description: A list of users
    post:
      security:
        - bearerAuth: []
      tags:
        - Admin/Users
      summary: Create a new user
      description: This endpoint creates a new user with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: User created successfully
  /api/admin/users/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Admin/Users
      summary: Retrieve a user by ID
      description: Fetch a user from the database using their ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user to retrieve.
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: The user information.
    put:
      security:
        - bearerAuth: []
      summary: Update a user by ID
      tags:
        - Admin/Users
      description: Update a user's information using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "200":
          description: User updated successfully.
    patch:
      security:
        - bearerAuth: []
      summary: Update a user by ID
      tags:
        - Admin/Users
      description: Update a user's information using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: User updated successfully.
    delete:
      security:
        - bearerAuth: []
      summary: Delete a user by ID
      tags:
        - Admin/Users
      description: Delete a user from the database using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the user to delete.
      responses:
        "200":
          description: User deleted successfully.
